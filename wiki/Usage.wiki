#labels Featured
= Introduction =

This page shows example code for altering the table or data properties programmatically.

==Create tables==

To create a basic table, only the following 4 lines are needed. We can also create a model from some data, then use that model to initiate the table. The data, a dictionary, will be appropriate to that model of course.

{{{
tframe = Frame(master)
tframe.pack()
table = TableCanvas(tframe)
table.createTableFrame()
}}}

==Set preferences==

Preferences for the table can be set on the constructor method, for example:
{{{
TableCanvas(frame, namefield='name',
               cellwidth=50, cellbackgr='#E3F6CE',
               thefont="Arial 10",rowheight=16,editable=False,
               rowselectedcolor='yellow',reverseorder=1)
}}}

Or can be loaded later from an external preferences file:
{{{
preferences=Preferences('TablesApp')
table.loadPrefs(preferences)
}}}

==Add new rows and columns==
If row or column names are not given in the argument then a dialog will pop up in the GUI asking for the name which will likely not be what you want.
{{{
table.add_Row(rowname)
table.add_Column(colname)
}}}

==Update the table==
This may need to be called to update the display after programmatically changing the table contents:
{{{
table.redrawTable()
}}}

==Put data in cells==
Currently the method is to get a handle on the table model and populate the data attribute directly then redraw the table. This is somewhat clumsy and a method to do it directly from the table will be added.
{{{
table.model.data[row][col] = value
table.redrawTable()
}}}

==Change column labels==
Column labels can be changed programmatically by accessing the *columnlabels* attribute of the table model:
{{{
table.model.columnlabels[colname] = newlabel
}}}
